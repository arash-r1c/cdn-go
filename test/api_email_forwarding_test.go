/*
ArvanCloud CDN Services

Testing EmailForwardingApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package r1cdn

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/arvancloud/cdn-go"
)

func Test_r1cdn_EmailForwardingApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EmailForwardingApiService EmailForwardingsActivate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsActivate(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsAliasesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string
		var emailForwardingAliasId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsAliasesDestroy(context.Background(), domain, emailForwardingId, emailForwardingAliasId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsAliasesIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsAliasesIndex(context.Background(), domain, emailForwardingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsAliasesStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsAliasesStore(context.Background(), domain, emailForwardingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsAliasesToggleActivation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string
		var emailForwardingAliasId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsAliasesToggleActivation(context.Background(), domain, emailForwardingId, emailForwardingAliasId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsAliasesUpdateRecipients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string
		var emailForwardingAliasId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsAliasesUpdateRecipients(context.Background(), domain, emailForwardingId, emailForwardingAliasId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsCatchAllActivate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsCatchAllActivate(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsCatchAllDeactivate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsCatchAllDeactivate(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsDeactivate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsDeactivate(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsRecipientsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string
		var emailForwardingRecipientId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsRecipientsDestroy(context.Background(), domain, emailForwardingId, emailForwardingRecipientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsRecipientsIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsRecipientsIndex(context.Background(), domain, emailForwardingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsRecipientsResendVerification", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string
		var emailForwardingRecipientId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsRecipientsResendVerification(context.Background(), domain, emailForwardingId, emailForwardingRecipientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsRecipientsSetDefault", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string
		var emailForwardingRecipientId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsRecipientsSetDefault(context.Background(), domain, emailForwardingId, emailForwardingRecipientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsRecipientsStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsRecipientsStore(context.Background(), domain, emailForwardingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsRecipientsVerify", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var emailForwardingId string
		var emailForwardingRecipientId string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsRecipientsVerify(context.Background(), domain, emailForwardingId, emailForwardingRecipientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EmailForwardingApiService EmailForwardingsStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.EmailForwardingApi.EmailForwardingsStats(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
