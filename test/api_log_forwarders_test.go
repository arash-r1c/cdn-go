/*
ArvanCloud CDN Services

Testing LogForwardersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package arvancloud

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/arash-r1c/cdn-go"
)

func Test_arvancloud_LogForwardersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogForwardersApiService LogForwardersDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var logForwarderId string

		resp, httpRes, err := apiClient.LogForwardersApi.LogForwardersDestroy(context.Background(), domain, logForwarderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogForwardersApiService LogForwardersIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LogForwardersApi.LogForwardersIndex(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogForwardersApiService LogForwardersShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var logForwarderId string

		resp, httpRes, err := apiClient.LogForwardersApi.LogForwardersShow(context.Background(), domain, logForwarderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogForwardersApiService LogForwardersStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LogForwardersApi.LogForwardersStore(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogForwardersApiService LogForwardersUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var logForwarderId string

		resp, httpRes, err := apiClient.LogForwardersApi.LogForwardersUpdate(context.Background(), domain, logForwarderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogForwardersApiService LogForwardersUpdateStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var logForwarderId string

		resp, httpRes, err := apiClient.LogForwardersApi.LogForwardersUpdateStatus(context.Background(), domain, logForwarderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
