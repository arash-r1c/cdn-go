/*
ArvanCloud CDN Services

Testing LoadBalancingApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package arvancloud

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/arash-r1c/cdn-go"
)

func Test_arvancloud_LoadBalancingApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LoadBalancingApiService LoadBalancersDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersDestroy(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersIndex(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsDestroy(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsIndex(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsOriginsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string
		var loadBalancerPoolOriginId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsOriginsDestroy(context.Background(), domain, loadBalancerId, loadBalancerPoolId, loadBalancerPoolOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsOriginsIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsOriginsIndex(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsOriginsShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string
		var loadBalancerPoolOriginId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsOriginsShow(context.Background(), domain, loadBalancerId, loadBalancerPoolId, loadBalancerPoolOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsOriginsStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsOriginsStore(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsOriginsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string
		var loadBalancerPoolOriginId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsOriginsUpdate(context.Background(), domain, loadBalancerId, loadBalancerPoolId, loadBalancerPoolOriginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsShow(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsStore(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsUpdate(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPoolsUpdatePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string
		var loadBalancerPoolId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPoolsUpdatePool(context.Background(), domain, loadBalancerId, loadBalancerPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersPrioritizePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersPrioritizePool(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersRegionsIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersRegionsIndex(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersSettingsShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersSettingsShow(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersSettingsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersSettingsUpdate(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersShow(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersStore(context.Background(), domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersUpdate(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LoadBalancingApiService LoadBalancersUpdateWithPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var loadBalancerId string

		resp, httpRes, err := apiClient.LoadBalancingApi.LoadBalancersUpdateWithPools(context.Background(), domain, loadBalancerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
