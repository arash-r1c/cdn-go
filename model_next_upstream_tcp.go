/*
ArvanCloud CDN Services

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.114.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package arvancloud

import (
	"encoding/json"
	"fmt"
)

// NextUpstreamTcp Try another server when the first one failed
type NextUpstreamTcp string

// List of NextUpstreamTcp
const (
	TRUE NextUpstreamTcp = "true"
	FALSE NextUpstreamTcp = "false"
)

// All allowed values of NextUpstreamTcp enum
var AllowedNextUpstreamTcpEnumValues = []NextUpstreamTcp{
	"true",
	"false",
}

func (v *NextUpstreamTcp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NextUpstreamTcp(value)
	for _, existing := range AllowedNextUpstreamTcpEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NextUpstreamTcp", value)
}

// NewNextUpstreamTcpFromValue returns a pointer to a valid NextUpstreamTcp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNextUpstreamTcpFromValue(v string) (*NextUpstreamTcp, error) {
	ev := NextUpstreamTcp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NextUpstreamTcp: valid values are %v", v, AllowedNextUpstreamTcpEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NextUpstreamTcp) IsValid() bool {
	for _, existing := range AllowedNextUpstreamTcpEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NextUpstreamTcp value
func (v NextUpstreamTcp) Ptr() *NextUpstreamTcp {
	return &v
}

type NullableNextUpstreamTcp struct {
	value *NextUpstreamTcp
	isSet bool
}

func (v NullableNextUpstreamTcp) Get() *NextUpstreamTcp {
	return v.value
}

func (v *NullableNextUpstreamTcp) Set(val *NextUpstreamTcp) {
	v.value = val
	v.isSet = true
}

func (v NullableNextUpstreamTcp) IsSet() bool {
	return v.isSet
}

func (v *NullableNextUpstreamTcp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextUpstreamTcp(val *NextUpstreamTcp) *NullableNextUpstreamTcp {
	return &NullableNextUpstreamTcp{value: val, isSet: true}
}

func (v NullableNextUpstreamTcp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextUpstreamTcp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

